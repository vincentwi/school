{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 1: Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to the advanced Machine Learning Course.\n",
    "\n",
    "The objective of this lab session is to code a few regression algorithms and to apply them to synthetic and real datasets.\n",
    "\n",
    "We begin with the standard imports:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns; sns.set()\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simple Linear Regression\n",
    "\n",
    "We will start with the most familiar linear regression, a straight-line fit to data.\n",
    "A straight-line fit is a model of the form\n",
    "$$\n",
    "y = ax + b\n",
    "$$\n",
    "where $a$ is commonly known as the *slope*, and $b$ is commonly known as the *intercept*.\n",
    "\n",
    "Consider the following data, which is scattered about a line with a slope of 2 and an intercept of -5:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x226731a1710>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rng = np.random.RandomState(1)\n",
    "x =  rng.rand(30)\n",
    "y = 2 * x - 5 + 0.1* rng.randn(30)\n",
    "plt.scatter(x, y);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fill in the MultivariateLinearRegression class whose method fit takes a matrix $X$ and an array $y$ as input and returns an array of coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MultivariateLinearRegression():\n",
    "    # Class for least-squares linear regression:\n",
    "\n",
    "    def __init__(self,):\n",
    "        self.coef_ = None\n",
    "        \n",
    "    def fit(self, X, y):\n",
    "        \"\"\" Fit the data (X, y).\n",
    "    \n",
    "        Parameters:\n",
    "        -----------\n",
    "        X: (num_samples, num_features) np.array\n",
    "            Design matrix\n",
    "        y: (num_sampes, ) np.array\n",
    "            Output vector\n",
    "        \n",
    "        Note:\n",
    "        -----\n",
    "        Updates self.coef_\n",
    "        \"\"\"\n",
    "        # Create a (num_samples, num_features+1) np.array X_aug whose first column \n",
    "        # is a column of all ones (so as to fit an intercept).\n",
    "        num_samples, num_features =  X.shape\n",
    "        X_aug = np.ones((num_samples, num_features+1))\n",
    "        X_aug[:, 1:] = X\n",
    "        \n",
    "        # Update self.coef_\n",
    "        \n",
    "        self.coef_ = np.linalg.inv(X_aug.T @ X_aug) @ X_aug.T @ y\n",
    "        \n",
    "        \n",
    "    def predict(self, X):\n",
    "        \"\"\" Make predictions for data X.\n",
    "    \n",
    "        Parameters:\n",
    "        -----------\n",
    "        X: (num_samples, num_features) np.array\n",
    "            Design matrix\n",
    "        \n",
    "        Returns:\n",
    "        -----\n",
    "        y_pred: (num_samples, ) np.array\n",
    "            Predictions\n",
    "        \"\"\"\n",
    "        num_samples, num_features =  X.shape\n",
    "        X_aug = np.ones((num_samples, num_features+1))\n",
    "        X_aug[:, 1:] = X\n",
    "\n",
    "        y_pred = X_aug @ self.coef_\n",
    "        return(y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try your model on the data and plot the data points and the fitted line:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-4.97604684  1.92920553]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x226734ff940>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = MultivariateLinearRegression()\n",
    "\n",
    "model.fit(x[:, np.newaxis], y)\n",
    "\n",
    "xfit = np.linspace(0, 1, 1000)\n",
    "yfit = model.predict(xfit[:, np.newaxis])\n",
    "\n",
    "print(model.coef_)\n",
    "\n",
    "plt.scatter(x, y)\n",
    "plt.plot(xfit, yfit);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Print the scope and the intercept:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model slope:    \n",
      "Model intercept:\n"
     ]
    }
   ],
   "source": [
    "print(\"Model slope:    \")\n",
    "print(\"Model intercept:\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that the results are very close to the inputs, as we might hope.\n",
    "\n",
    "Of course our linear regression estimator is much more capable than this, however—in addition to simple straight-line fits, it can also handle multidimensional linear models of the form\n",
    "$$\n",
    "y = a_0 + a_1 x_1 + a_2 x_2 + \\cdots\n",
    "$$\n",
    "where there are multiple $x$ values.\n",
    "Geometrically, this is akin to fitting a plane to points in three dimensions, or fitting a hyper-plane to points in higher dimensions.\n",
    "\n",
    "The multidimensional nature of such regressions makes them more difficult to visualize, but we can see one of these fits in action by building a toy example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.5  1.5 -2.   1. ]\n"
     ]
    }
   ],
   "source": [
    "rng = np.random.RandomState(1)\n",
    "X = 3 * rng.rand(100, 3)\n",
    "y = 0.5 + np.dot(X, [1.5, -2., 1.])\n",
    "\n",
    "model.fit(X, y)\n",
    "print(model.coef_) # perfect fitting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here the $y$ data is constructed from three random $x$ values, and the linear regression recovers the coefficients used to construct the data.\n",
    "\n",
    "In this way, we can our estimator to fit lines, planes, or hyperplanes to our data.\n",
    "It still appears that this approach would be limited to strictly linear relationships between variables, but it turns out we can relax this as well.\n",
    "\n",
    "## Basis Function Regression\n",
    "\n",
    "One trick you can use to adapt linear regression to nonlinear relationships between variables is to transform the data according to *basis functions*.\n",
    "\n",
    "The idea is to take our multidimensional linear model:\n",
    "$$\n",
    "y = a_0 + a_1 x_1 + a_2 x_2 + a_3 x_3 + \\cdots\n",
    "$$\n",
    "and build the $x_1, x_2, x_3,$ and so on, from our single-dimensional input $x$.\n",
    "That is, we let $x_n = f_n(x)$, where $f_n()$ is some function that transforms our data.\n",
    "\n",
    "For example, if $f_n(x) = x^n$, our model becomes a polynomial regression:\n",
    "$$\n",
    "y = a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \\cdots\n",
    "$$\n",
    "Notice that this is *still a linear model*—the linearity refers to the fact that the coefficients $a_n$ never multiply or divide each other.\n",
    "What we have effectively done is taken our one-dimensional $x$ values and projected them into a higher dimension, so that a linear fit can fit more complicated relationships between $x$ and $y$.\n",
    "\n",
    "### Polynomial basis functions\n",
    "\n",
    "This polynomial projection is useful enough that it is built into Scikit-Learn, using the ``PolynomialFeatures`` transformer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   2.,    4.,    8.,   16.,   32.],\n",
       "       [   3.,    9.,   27.,   81.,  243.],\n",
       "       [   4.,   16.,   64.,  256., 1024.]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "x = np.array([2, 3, 4])\n",
    "poly = PolynomialFeatures(5, include_bias=False) # with or without intercept\n",
    "poly.fit_transform(x[:, None])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see here that the transformer has converted our one-dimensional array into a three-dimensional array by taking the exponent of each value.\n",
    "This new, higher-dimensional data representation can then be plugged into a linear regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this transform, we can use the linear model to fit much more complicated relationships between $x$ and $y$. \n",
    "For example, here is a sine wave with noise:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x226750f9438>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rng = np.random.RandomState(1)\n",
    "x = rng.rand(50)\n",
    "y = 2 * np.sin(1.8*np.pi*x) + 0.1 * rng.randn(50)\n",
    "\n",
    "poly = PolynomialFeatures(25, include_bias=False)\n",
    "polyx = poly.fit_transform(x[:, None])\n",
    "polyxfit = poly.fit_transform(xfit[:, None])\n",
    "model.fit(polyx, y)\n",
    "yfit  = model.predict(polyxfit)\n",
    "\n",
    "plt.scatter(x, y)\n",
    "plt.plot(xfit, yfit);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try with different maximum degrees. Our linear model can provide an excellent fit to this non-linear data!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regularization\n",
    "\n",
    "The introduction of basis functions into our linear regression makes the model much more flexible, but it also can very quickly lead to over-fitting and numeric problems."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ridge regression ($L_2$ Regularization)\n",
    "\n",
    "Perhaps the most common form of regularization is known as *ridge regression* or $L_2$ *regularization*, sometimes also called *Tikhonov regularization*.\n",
    "This proceeds by penalizing the sum of squares (2-norms) of the model coefficients; in this case, the penalty on the model fit would be \n",
    "$$\n",
    "P = \\alpha\\sum_{n=1}^N \\theta_n^2\n",
    "$$\n",
    "where $\\alpha$ is a free parameter that controls the strength of the penalty."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Fill in the following class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "class RidgeRegularization():\n",
    "    # Class for least-squares linear regression:\n",
    "\n",
    "    def __init__(self, alpha):\n",
    "        self.coef_ = None\n",
    "        self.alpha_ = alpha\n",
    "        \n",
    "    def fit(self, X, y):\n",
    "        \"\"\" Fit the data (X, y).\n",
    "    \n",
    "        Parameters:\n",
    "        -----------\n",
    "        X: (num_samples, num_features) np.array\n",
    "            Design matrix\n",
    "        y: (num_sampes, ) np.array\n",
    "            Output vector\n",
    "        \n",
    "        Note:\n",
    "        -----\n",
    "        Updates self.coef_\n",
    "        \"\"\"\n",
    "        # Create a (num_samples, num_features+1) np.array X_aug whose first column \n",
    "        # is a column of all ones (so as to fit an intercept).\n",
    "        num_samples, num_features =  X.shape\n",
    "        X_aug = np.ones((num_samples, num_features+1))\n",
    "        X_aug[:, 1:] = X\n",
    "        \n",
    "        # Update self.coef_\n",
    "        self.coef_ = np.linalg.inv(X_aug.T @ X_aug + self.alpha_ * np.eye(num_features+1)) @ X_aug.T @ y\n",
    "        \n",
    "    def predict(self, X):\n",
    "        \"\"\" Make predictions for data X.\n",
    "    \n",
    "        Parameters:\n",
    "        -----------\n",
    "        X: (num_samples, num_features) np.array\n",
    "            Design matrix\n",
    "        \n",
    "        Returns:\n",
    "        -----\n",
    "        y_pred: (num_samples, ) np.array\n",
    "            Predictions\n",
    "        \"\"\"\n",
    "        num_samples, num_features =  X.shape\n",
    "        X_aug = np.ones((num_samples, num_features+1))\n",
    "        X_aug[:, 1:] = X\n",
    "\n",
    "        y_pred = X_aug @ self.coef_\n",
    "        return(y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try the model in our data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x226750b5c50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "poly = PolynomialFeatures(300, include_bias=False) \n",
    "holu = poly.fit_transform(x[:, None])  \n",
    "model = RidgeRegularization(0.0001) \n",
    "model.fit(holu, y)\n",
    "\n",
    "plt.scatter(x[:, np.newaxis], y)\n",
    "prediccion = model.predict(poly.fit_transform(xfit[:, None]))\n",
    "plt.plot(xfit, prediccion)\n",
    "\n",
    "plt.xlim(-0.02, 1.02)\n",
    "plt.ylim(-2.5, 2.5);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The $\\alpha$ parameter is essentially a knob controlling the complexity of the resulting model.\n",
    "In the limit $\\alpha \\to 0$, we recover the standard linear regression result; in the limit $\\alpha \\to \\infty$, all model responses will be suppressed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lasso regression ($L_1$ Regularization)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "class LassoRegression():\n",
    "    # Class for least-squares linear regression:\n",
    "\n",
    "    def __init__(self, alpha):\n",
    "        self.coef_ = None\n",
    "        self.alpha_ = alpha\n",
    "        \n",
    "    def soft_threshold(self, alpha, beta):\n",
    "        if beta > alpha:\n",
    "            return beta - alpha\n",
    "        elif beta < -alpha:\n",
    "            return beta + alpha\n",
    "        else:\n",
    "            return 0\n",
    "    \n",
    "    def fit(self, X, y):\n",
    "        \"\"\" Fit the data (X, y).\n",
    "    \n",
    "        Parameters:\n",
    "        -----------\n",
    "        X: (num_samples, num_features) np.array\n",
    "            Design matrix\n",
    "        y: (num_sampes, ) np.array\n",
    "            Output vector\n",
    "        \n",
    "        Note:\n",
    "        -----\n",
    "        Updates self.coef_\n",
    "        \"\"\"\n",
    "        # Create a (num_samples, num_features+1) np.array X_aug whose first column \n",
    "        # is a column of all ones (so as to fit an intercept).\n",
    "        num_samples, num_features =  X.shape\n",
    "        X_aug = np.ones((num_samples, num_features+1))\n",
    "        X_aug[:, 1:] = X\n",
    "        X = X_aug\n",
    "       \n",
    "        self.coef_ = np.zeros((num_features+1, ))\n",
    "        \n",
    "        self.coef_[0] = np.mean(y)\n",
    "        \n",
    "        convergence = False\n",
    "        \n",
    "        while not(convergence):\n",
    "            newcoef = np.copy(self.coef_)\n",
    "            for j in range(1, num_features+1):\n",
    "                exclude_j = np.array(range(num_features+1)) != j\n",
    "                partial_residuals = y - X[:, exclude_j] @ newcoef[exclude_j] \n",
    "                beta = self.soft_threshold(self.alpha_, X[:, j] @ partial_residuals)/(X[:, j]**2).sum()\n",
    "                newcoef[j] = beta\n",
    "            newcoef[0] = np.sum(y - (X[:, 1:] @ newcoef[1:]))/(X.shape[0])\n",
    "            convergence = np.inner(self.coef_-newcoef, self.coef_-newcoef) < 10**(-5) \n",
    "            self.coef_ = np.copy(newcoef)\n",
    "        \n",
    "    def predict(self, X):\n",
    "        \"\"\" Make predictions for data X.\n",
    "    \n",
    "        Parameters:\n",
    "        -----------\n",
    "        X: (num_samples, num_features) np.array\n",
    "            Design matrix\n",
    "        \n",
    "        Returns:\n",
    "        -----\n",
    "        y_pred: (num_samples, ) np.array\n",
    "            Predictions\n",
    "        \"\"\"\n",
    "        num_samples, num_features =  X.shape\n",
    "        X_aug = np.ones((num_samples, num_features+1))\n",
    "        X_aug[:, 1:] = X\n",
    "\n",
    "        y_pred = X_aug @ self.coef_\n",
    "        return(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x22673c26d68>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = LassoRegression(0.0001)\n",
    "poly = PolynomialFeatures(300, include_bias=False) \n",
    "holu = poly.fit_transform(x[:, None])  \n",
    "\n",
    "model.fit(holu, y)\n",
    "\n",
    "plt.scatter(x[:, np.newaxis], y)\n",
    "prediccion = model.predict(poly.fit_transform(xfit[:, None]))\n",
    "plt.plot(xfit, prediccion)\n",
    "\n",
    "plt.xlim(-0.02, 1.02)\n",
    "plt.ylim(-2.5, 2.5);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Robust regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "class RobustRegression():\n",
    "    # Class for least-squares linear regression:\n",
    "\n",
    "    def __init__(self, potential, k):\n",
    "        self.coef_ = None\n",
    "        self.potencial_ = potential\n",
    "        self.k_ = k\n",
    "        \n",
    "    def mad(self, x):\n",
    "        return(np.median(np.abs(x-np.median(x))))\n",
    "        \n",
    "    def weight_function(self, x, potential, k):\n",
    "        if potential == \"huber\":\n",
    "            if np.abs(x)<=k:\n",
    "                return(1)\n",
    "            else:\n",
    "                return(k/np.abs(x))\n",
    "        if potential == \"bisquare\":\n",
    "            if np.abs(x)<=k:\n",
    "                return((1-(x/k)**2)**2)\n",
    "            else:\n",
    "                return(0)\n",
    "    \n",
    "    def fit(self, X, y):\n",
    "        \"\"\" Fit the data (X, y).\n",
    "    \n",
    "        Parameters:\n",
    "        -----------\n",
    "        X: (num_samples, num_features) np.array\n",
    "            Design matrix\n",
    "        y: (num_sampes, ) np.array\n",
    "            Output vector\n",
    "        \n",
    "        Note:\n",
    "        -----\n",
    "        Updates self.coef_\n",
    "        \"\"\"\n",
    "        # Create a (num_samples, num_features+1) np.array X_aug whose first column \n",
    "        # is a column of all ones (so as to fit an intercept).\n",
    "        num_samples, num_features =  X.shape\n",
    "        X_aug = np.ones((num_samples, num_features+1))\n",
    "        X_aug[:, 1:] = X\n",
    "        \n",
    "        self.coef_ = np.linalg.inv(X_aug.T @ X_aug ) @ X_aug.T @ y\n",
    "        \n",
    "        convergence = False\n",
    "        \n",
    "        while not(convergence):\n",
    "        \n",
    "            residuals = y - X_aug @ self.coef_\n",
    "            norm_residuals = residuals/self.mad(residuals)\n",
    "            weight_matrix = np.diag(np.array([self.weight_function(ri, self.potencial_, self.k_) for ri in norm_residuals]))\n",
    "            newcoef = np.linalg.inv(X_aug.T @ weight_matrix @ X_aug ) @ X_aug.T @ weight_matrix @ y\n",
    "            \n",
    "            convergence = np.inner(self.coef_-newcoef, self.coef_-newcoef) < 10**(-5) \n",
    "            self.coef_ = np.copy(newcoef)\n",
    "        \n",
    "    def predict(self, X):\n",
    "        \"\"\" Make predictions for data X.\n",
    "    \n",
    "        Parameters:\n",
    "        -----------\n",
    "        X: (num_samples, num_features) np.array\n",
    "            Design matrix\n",
    "        \n",
    "        Returns:\n",
    "        -----\n",
    "        y_pred: (num_samples, ) np.array\n",
    "            Predictions\n",
    "        \"\"\"\n",
    "        num_samples, num_features =  X.shape\n",
    "        X_aug = np.ones((num_samples, num_features+1))\n",
    "        X_aug[:, 1:] = X\n",
    "\n",
    "        y_pred = X_aug @ self.coef_\n",
    "        return(y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try it in the following data and compare with the performance of the different models:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-5.0223195   2.02540092]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x22673c923c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.random.seed(300)\n",
    "rng = np.random.RandomState(1)\n",
    "x =  rng.rand(30)\n",
    "y = 2 * x - 5 + 0.1* np.random.standard_cauchy(30)\n",
    "plt.scatter(x, y);\n",
    "\n",
    "# model = MultivariateLinearRegression()\n",
    "model = RobustRegression(\"huber\", 1.0)\n",
    "\n",
    "model.fit(x[:, np.newaxis], y)\n",
    "\n",
    "print(model.coef_)\n",
    "\n",
    "xfit = np.linspace(0, 1.0, 1000)\n",
    "yfit = model.predict(xfit[:, np.newaxis])\n",
    "\n",
    "plt.scatter(x, y)\n",
    "plt.plot(xfit, yfit);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: Predicting Bicycle Traffic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "As an example, let's take a look at whether we can predict the number of bicycle trips across Seattle's Fremont Bridge based on weather, season, and other factors.\n",
    "\n",
    "In this section, we joinned the bike data with another dataset, and try to determine the extent to which weather and seasonal factors—temperature, precipitation, and daylight hours—affect the volume of bicycle traffic through this corridor.\n",
    "\n",
    "We will perform a simple linear regression to relate weather and other information to bicycle counts, in order to estimate how a change in any one of these parameters affects the number of riders on a given day.\n",
    "\n",
    "Let's start by loading the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "daily = pd.read_csv('data.csv', index_col='Date', parse_dates=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this in place, we can choose the columns to use, and fit a linear regression model to our data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop any rows with null values\n",
    "daily.dropna(axis=0, how='any', inplace=True)\n",
    "\n",
    "column_names = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', 'holiday',\n",
    "                'daylight_hrs', 'PRCP', 'dry day', 'Temp (C)']\n",
    "X = daily[column_names]\n",
    "y = daily['Total']\n",
    "\n",
    "from sklearn import preprocessing\n",
    "\n",
    "xx = X.values.astype(float) #returns a numpy array\n",
    "min_max_scaler = preprocessing.MinMaxScaler()\n",
    "x_scaled = min_max_scaler.fit_transform(xx)\n",
    "\n",
    "model = RidgeRegularization(0.1)\n",
    "model1 = MultivariateLinearRegression()\n",
    "model.fit(X.values.astype(float), y.values.astype(float))\n",
    "daily['predicted'] = model.predict(X.values.astype(float))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can compare the total and predicted bicycle traffic visually:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2266ccaae80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "daily[['Total', 'predicted']].plot(alpha=0.5);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is evident that we have missed some key features, especially during the summer time.\n",
    "Either our features are not complete (i.e., people decide whether to ride to work based on more than just these) or there are some nonlinear relationships that we have failed to take into account (e.g., perhaps people ride less at both high and low temperatures).\n",
    "Nevertheless, our rough approximation is enough to give us some insights, and we can take a look at the coefficients of the linear model to estimate how much each feature contributes to the daily bicycle count:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept         34.314897\n",
       "Mon              490.296158\n",
       "Tue              596.243539\n",
       "Wed              578.405151\n",
       "Thu              468.195949\n",
       "Fri              164.217455\n",
       "Sat            -1116.446711\n",
       "Sun            -1146.596643\n",
       "holiday        -1184.393535\n",
       "daylight_hrs     129.240672\n",
       "PRCP            -663.374237\n",
       "dry day          551.976034\n",
       "Temp (C)          66.065583\n",
       "dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params = pd.Series(model.coef_, index=pd.concat([pd.Series([\"Intercept\"]),pd.Series(X.columns.values)]))\n",
    "params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We first see that there is a relatively stable trend in the weekly baseline: there are many more riders on weekdays than on weekends and holidays.\n",
    "We see that for each additional hour of daylight, 129 ± 9 more people choose to ride; a temperature increase of one degree Celsius encourages 65 ± 4 people to grab their bicycle; a dry day means an average of 548 ± 33 more riders, and each inch of precipitation means 665 ± 62 more people leave their bike at home.\n",
    "Once all these effects are accounted for, we see a modest increase of 27 ± 18 new daily riders each year.\n",
    "\n",
    "Our model is almost certainly missing some relevant information. For example, nonlinear effects (such as effects of precipitation *and* cold temperature) and nonlinear trends within each variable (such as disinclination to ride at very cold and very hot temperatures) cannot be accounted for in this model.\n",
    "Additionally, we have thrown away some of the finer-grained information (such as the difference between a rainy morning and a rainy afternoon), and we have ignored correlations between days (such as the possible effect of a rainy Tuesday on Wednesday's numbers, or the effect of an unexpected sunny day after a streak of rainy days).\n",
    "These are all potentially interesting effects, and you now have the tools to begin exploring them if you wish!"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
